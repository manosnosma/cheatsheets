#+title: Python Cheat Sheet
#+author: Manos Vasilakis (advizor.gr)

* Comments.
#+BEGIN_SRC python
# Single line comments

""" Multiline comment
    can be written like
    this and can be as
    ....

           ....

                   ....
    long as you need it
    to be.
"""
#+END_SRC

* Primitive Datatypes and Operators
** Numbers
#+BEGIN_SRC python
3    # => 3    => integer
3.14 # => 3.14 => float
#+END_SRC

** Basic Math
#+BEGIN_SRC python
1 + 1   # => 2
8 - 1   # => 7
10 * 2  # => 20
35 / 5  # => 7.0
#+END_SRC

** Integer division
#+BEGIN_SRC python
5 // 3       # => 1
5.0 // 3.0   # => 1.0 # works on floats too
-5 // 3      # => -2
-5.0 // 3.0  # => -2.0
#+END_SRC

** Division's result is always a float
#+BEGIN_SRC python
10.0 / 3  # => 3.3333333333333335
#+END_SRC

** Modulo Operation
#+BEGIN_SRC python
7 % 3  # => 1
#+END_SRC

** Exponentiation
(x**y, x to the yth power)
#+BEGIN_SRC python
2**3  # => 8
#+END_SRC

** Enforce precedence
#+BEGIN_SRC python
(1 + 3) * 2  # => 8
#+END_SRC

** Boolean values are primitives
(Note: the capitalization)
#+BEGIN_SRC python
True
False
#+END_SRC

** Negate with not
#+BEGIN_SRC python
not True   # => False
not False  # => True
#+END_SRC

** Boolean Operators
Note "and" and "or" are case-sensitive
#+BEGIN_SRC python
True and False  # => False
False or True   # => True
#+END_SRC

** True and False are actually 1 and 0
#+BEGIN_SRC python
True + True # => 2
True * 8    # => 8
False - 5   # => -5
#+END_SRC

** Comparison operators
#+BEGIN_SRC python
0 == False  # => True
1 == True   # => True
2 == True   # => False
-5 != False # => True
#+END_SRC

** Using boolean logical operators on ints
Boolean logical operators on ints casts them to booleans for
evaluation, but their non-cast value is returned

Don't mix up with bool(ints) and bitwise and/or (&,|)

#+BEGIN_SRC python
bool(0)     # => False
bool(4)     # => True
bool(-6)    # => True
0 and 2     # => 0
-5 or 0     # => -5
#+END_SRC

** Equality is ==
#+BEGIN_SRC python
1 == 1  # => True
2 == 1  # => False
#+END_SRC

** Inequality is !=
#+BEGIN_SRC python
1 != 1  # => False
2 != 1  # => True
#+END_SRC

** More comparisons
#+BEGIN_SRC python
1 < 10  # => True
1 > 10  # => False
2 <= 2  # => True
2 >= 2  # => True
#+END_SRC

** Is value in range?
#+BEGIN_SRC python
1 < 2 and 2 < 3  # => True
2 < 3 and 3 < 2  # => False
#+END_SRC

*** Chaining makes this look nicer
#+BEGIN_SRC python
1 < 2 < 3  # => True
2 < 3 < 2  # => False
#+END_SRC

** is VS. ====
'is' checks if two variables refer to the same object, but == checks

If the objects pointed to have the same values.

#+BEGIN_SRC python
a = [1, 2, 3, 4]  # Point a at a new list, [1, 2, 3, 4]
b = a             # Point b at what a is pointing to
b is a            # => True, a and b refer to the same object
b == a            # => True, a's and b's objects are equal
b = [1, 2, 3, 4]  # Point b at a new list, [1, 2, 3, 4]
b is a            # => False, a and b do not refer to the same object
b == a            # => True, a's and b's objects are equal
#+END_SRC

** Strings are created with " or '
#+BEGIN_SRC python
"This is a string."
'This is also a string.'
#+END_SRC

** Strings can be added too!
#+BEGIN_SRC python
"Hello " + "world!"  # => "Hello world!"
#+END_SRC

** Concatenate strings without using '+'
#+BEGIN_SRC python
"Hello " "world!"    # => "Hello world!"
#+END_SRC

** A string ~ list of chars
#+BEGIN_SRC python
"This is a string"[0]  # => 'T'
#+END_SRC

** Length of a string
#+BEGIN_SRC python
len("This is a string")  # => 16
#+END_SRC

** Format strings with .format
#+BEGIN_SRC python
"{} can be {}".format("Strings", "interpolated")  # => "Strings can be interpolated"
#+END_SRC

** Repeat the formatting arguments to save some typing.
#+BEGIN_SRC python
"{0} be nimble, {0} be quick, {0} jump over the {1}".format("Jack", "candle stick")
# => "Jack be nimble, Jack be quick, Jack jump over the candle stick"
#+END_SRC

** Use keywords if you don't want to count.
#+BEGIN_SRC python
"{name} wants to eat {food}".format(name="Bob", food="lasagna")  # => "Bob wants to eat lasagna"
#+END_SRC

** The old style of formatting:
#+BEGIN_SRC python
"%s can be %s the %s way" % ("Strings", "interpolated", "old")  # => "Strings can be interpolated the old way"
#+END_SRC

** Format using f-strings or formatted string literals (in Python 3.6+)
#+BEGIN_SRC python
name = "Reiko"
f"She said her name is {name}." # => "She said her name is Reiko"
#+END_SRC

You can basically put any Python statement inside the braces and it will be output in the string.
#+BEGIN_SRC python
f"{name} is {len(name)} characters long."
#+END_SRC

** None is an object
#+BEGIN_SRC python
None  # => None
#+END_SRC

** Don't use the equality "==" symbol to compare objects to None
Use "is" instead. This checks for equality of object identity.

#+BEGIN_SRC python
"etc" is None  # => False
None is None   # => True
#+END_SRC

** None, 0, and empty strings/lists/dicts/tuples
None, 0, and empty strings/lists/dicts/tuples all evaluate to False.

All other values are True.
#+BEGIN_SRC python
bool(0)   # => False
bool("")  # => False
bool([])  # => False
bool({})  # => False
bool(())  # => False
#+END_SRC

* Variables and Collections
** The print function
#+BEGIN_SRC python
print("I'm Python. Nice to meet you!")  # => I'm Python. Nice to meet you!
#+END_SRC
*** Default newline at the end.
By default the print function also prints out a newline at the end.

Use the optional argument end to change the end string.
#+BEGIN_SRC python
print("Hello, World", end="!")  # => Hello, World!
#+END_SRC

** The input function
#+BEGIN_SRC python
input_string_var = input("Enter some data: ") # Returns the data as a string
#+END_SRC
Note: In earlier versions of Python, input() method was named as raw_input()

** Only assignments, No declarations.
Convention is to use lower_case_with_underscores
#+BEGIN_SRC python
some_var = 5
some_var  # => 5
#+END_SRC

** Accessing Unassigned variable
Accessing a previously unassigned variable is an exception.
See Control Flow to learn more about exception handling.
#+BEGIN_SRC python
some_unknown_var  # Raises a NameError
#+END_SRC

** Ternary operator
Equivalent of C's '?:' ternary operator
#+BEGIN_SRC python
"yahoo!" if 3 > 2 else 2  # => "yahoo!"
#+END_SRC

** Lists (~arraylike)
#+BEGIN_SRC python
li = []
#+END_SRC
*** Pre-filled list
#+BEGIN_SRC python
other_li = [4, 5, 6]
#+END_SRC

*** append - Add to the end
#+BEGIN_SRC python
li.append(1)    # li is now [1]
li.append(2)    # li is now [1, 2]
li.append(4)    # li is now [1, 2, 4]
li.append(3)    # li is now [1, 2, 4, 3]
#+END_SRC
*** pop - Remove from the end
#+BEGIN_SRC python
li.pop()        # => 3 and li is now [1, 2, 4]
#+END_SRC
*** Access list element
#+BEGIN_SRC python
li[0]   # => 1
#+END_SRC
*** Last element
#+BEGIN_SRC python
li[-1]  # => 3
#+END_SRC

*** Out of bounds is an IndexError
#+BEGIN_SRC python
li[4]  # Raises an IndexError
#+END_SRC

*** Ranges with slice syntax.
The start index is included, the end index is not
*** Closed/open range
#+BEGIN_SRC python
li[1:3]   # => [2, 4]
#+END_SRC
*** Omit the beginning and return the list
#+BEGIN_SRC python
li[2:]    # => [4, 3]
#+END_SRC
*** Omit the end and return the list
#+BEGIN_SRC python
li[:3]    # => [1, 2, 4]
#+END_SRC
*** Select every second entry
#+BEGIN_SRC python
li[::2]   # =>[1, 4]
#+END_SRC
*** Return a reversed copy
#+BEGIN_SRC python
li[::-1]  # => [3, 4, 2, 1]
#+END_SRC
*** Advanced Slice Syntax
#+BEGIN_SRC python
li[start:end:step]
#+END_SRC

*** Copy list
#+BEGIN_SRC python
li2 = li[:]  # => li2 = [1, 2, 4, 3] but (li2 is li) will result in false.
#+END_SRC

*** del - Remove arbitrary elements
#+BEGIN_SRC python
del li[2]  # li is now [1, 2, 3]
#+END_SRC

*** Remove first occurrence of a value
#+BEGIN_SRC python
li.remove(2)  # li is now [1, 3]
li.remove(2)  # Raises a ValueError as 2 is not in the list
#+END_SRC

*** Insert element at specific index
#+BEGIN_SRC python
li.insert(1, 2)  # li is now [1, 2, 3] again
#+END_SRC

*** Get the index of the first item found match
#+BEGIN_SRC python
li.index(2)  # => 1
li.index(4)  # Raises a ValueError as 4 is not in the list
#+END_SRC

*** Add lists
Note: values for li and for other_li are not modified.
#+BEGIN_SRC python
li + other_li  # => [1, 2, 3, 4, 5, 6]
#+END_SRC

*** extend - Concatenate lists
#+BEGIN_SRC python
li.extend(other_li)  # Now li is [1, 2, 3, 4, 5, 6]
#+END_SRC

*** in - Check for existence
#+BEGIN_SRC python
1 in li  # => True
#+END_SRC

*** len - Length of list
#+BEGIN_SRC python
len(li)  # => 6
#+END_SRC

** Tuples (~immutable lists).
#+BEGIN_SRC python
tup = (1, 2, 3)
tup[0]      # => 1
tup[0] = 3  # Raises a TypeError
#+END_SRC

*** length
Note that a tuple of length one has to have a comma after the last element but tuples of other lengths, even zero, do not.
#+BEGIN_SRC python
type((1))   # => <class 'int'>
type((1,))  # => <class 'tuple'>
type(())    # => <class 'tuple'>
#+END_SRC

*** Operations
You can do most of the list operations on tuples too
#+BEGIN_SRC python
len(tup)         # => 3
tup + (4, 5, 6)  # => (1, 2, 3, 4, 5, 6)
tup[:2]          # => (1, 2)
2 in tup         # => True
#+END_SRC

*** Unpack tuples
You can unpack tuples (or lists) into variables
#+BEGIN_SRC python
a, b, c = (1, 2, 3)  # a is now 1, b is now 2 and c is now 3
#+END_SRC

*** Extended unpacking
You can also do extended unpacking
#+BEGIN_SRC python
a, *b, c = (1, 2, 3, 4)  # a is now 1, b is now [2, 3] and c is now 4
#+END_SRC

*** Tuples by default
Tuples are created by default if you leave out the parentheses
#+BEGIN_SRC python
d, e, f = 4, 5, 6  # tuple 4, 5, 6 is unpacked into variables d, e and f
# respectively such that d = 4, e = 5 and f = 6
#+END_SRC

*** Swap 2 values
Swap two values easily
#+BEGIN_SRC python
e, d = d, e  # d is now 5 and e is now 4
#+END_SRC

** Dictionaries (~key-value pairs)
#+BEGIN_SRC python
empty_dict = {}
#+END_SRC
*** Prefilled dictionary
#+BEGIN_SRC python
filled_dict = {"one": 1, "two": 2, "three": 3}
#+END_SRC

Note keys for dictionaries have to be immutable types. This is to ensure that
the key can be converted to a constant hash value for quick look-ups.

*** Immutable types
Immutable types include ints, floats, strings, tuples.
#+BEGIN_SRC python
invalid_dict = {[1,2,3]: "123"}  # => Raises a TypeError: unhashable type: 'list'
valid_dict = {(1,2,3):[1,2,3]}   # Values can be of any type, however.
#+END_SRC

*** Look up values with []
#+BEGIN_SRC python
filled_dict["one"]  # => 1
#+END_SRC

*** keys() - Get all keys
Get all keys as an iterable with "keys()".
We need to wrap the call in list()
to turn it into a list. We'll talk about those later.  Note - Dictionary key
ordering is not guaranteed. Your results might not match this exactly.
#+BEGIN_SRC python
list(filled_dict.keys())  # => ["three", "two", "one"]
#+END_SRC

*** values() - Get all values
Get all values as an iterable.
Once again we need to wrap it
in list() to get it out of the iterable.

Note - Same as above regarding key ordering.

#+BEGIN_SRC python
list(filled_dict.values())  # => [3, 2, 1]
#+END_SRC

*** in - Check for existence of keys
#+BEGIN_SRC python
"one" in filled_dict  # => True
1 in filled_dict      # => False
#+END_SRC

*** Non-existing key is a KeyError
#+BEGIN_SRC python
filled_dict["four"]  # KeyError
#+END_SRC

**** Use "get()" to avoid the KeyError
#+BEGIN_SRC python
filled_dict.get("one")      # => 1
filled_dict.get("four")     # => None
#+END_SRC
***** The get method supports a default argument when the value is missing
#+BEGIN_SRC python
filled_dict.get("one", 4)   # => 1
filled_dict.get("four", 4)  # => 4
#+END_SRC

*** setdefault()
"setdefault()" inserts into a dictionary only if the given key isn't present.
#+BEGIN_SRC python
filled_dict.setdefault("five", 5)  # filled_dict["five"] is set to 5
filled_dict.setdefault("five", 6)  # filled_dict["five"] is still 5
#+END_SRC

*** Adding to a dictionary
#+BEGIN_SRC python
filled_dict.update({"four":4})  # => {"one": 1, "two": 2, "three": 3, "four": 4}
filled_dict["four"] = 4         # another way to add to dict
#+END_SRC

*** del - Remove keys
#+BEGIN_SRC python
del filled_dict["one"]  # Removes the key "one" from filled dict
#+END_SRC

*** Additional unpacking options
(Python >= 3.5)
#+BEGIN_SRC python
{'a': 1, **{'b': 2}}  # => {'a': 1, 'b': 2}
{'a': 1, **{'a': 2}}  # => {'a': 2}
#+END_SRC

** Sets (~unique elements)
#+BEGIN_SRC python
empty_set = set()
#+END_SRC
*** Initialize a set with values.
It looks a bit like a dict.
#+BEGIN_SRC python
some_set = {1, 1, 2, 2, 3, 4}  # some_set is now {1, 2, 3, 4}
#+END_SRC

*** The elements of a set have to be immutable.
Similar to keys of a dictionary, elements of a set have to be immutable.
#+BEGIN_SRC python
invalid_set = {[1], 1}  # => Raises a TypeError: unhashable type: 'list'
valid_set = {(1,), 1}
#+END_SRC

*** Add item to the set
#+BEGIN_SRC python
filled_set = some_set
filled_set.add(5)  # filled_set is now {1, 2, 3, 4, 5}
#+END_SRC

*** None duplicate elements
#+BEGIN_SRC python
filled_set.add(5)  # it remains as before {1, 2, 3, 4, 5}
#+END_SRC

*** Set intersection with &
#+BEGIN_SRC python
other_set = {3, 4, 5, 6}
filled_set & other_set  # => {3, 4, 5}
#+END_SRC

*** Set union with |
#+BEGIN_SRC python
filled_set | other_set  # => {1, 2, 3, 4, 5, 6}
#+END_SRC

*** Set difference with -
#+BEGIN_SRC python
{1, 2, 3, 4} - {2, 3, 5}  # => {1, 4}
#+END_SRC

*** Set symmetric difference with ^
#+BEGIN_SRC python
{1, 2, 3, 4} ^ {2, 3, 5}  # => {1, 4, 5}
#+END_SRC

*** Set Superset
Check if set on the left is a superset of set on the right
#+BEGIN_SRC python
{1, 2} >= {1, 2, 3} # => False
#+END_SRC

*** Set Subset
Check if set on the left is a subset of set on the right
#+BEGIN_SRC python
{1, 2} <= {1, 2, 3} # => True
#+END_SRC

*** in - Check for existence
#+BEGIN_SRC python
2 in filled_set   # => True
10 in filled_set  # => False
#+END_SRC

* Control Flow and Iterables
** If statement
Here is an if statement.

Indentation is significant in Python!
Convention is to use four spaces, not tabs.

This prints "some_var is smaller than 10"
#+BEGIN_SRC python
some_var = 5
if some_var > 10:
    print("some_var is totally bigger than 10.")
elif some_var < 10:    # This elif clause is optional.
    print("some_var is smaller than 10.")
else:                  # This is optional too.
    print("some_var is indeed 10.")
#+END_SRC

** For loop
For loops iterate over lists
#+BEGIN_EXAMPLE
prints:
    dog is a mammal
    cat is a mammal
    mouse is a mammal
#+END_EXAMPLE

#+BEGIN_SRC python
for animal in ["dog", "cat", "mouse"]:
    # You can use format() to interpolate formatted strings
    print("{} is a mammal".format(animal))
#+END_SRC
*** range
**** range(number)
Returns an iterable of numbers from zero to the given number
#+BEGIN_EXAMPLE
prints:
    0
    1
    2
    3
#+END_EXAMPLE
#+BEGIN_SRC python
for i in range(4):
    print(i)
#+END_SRC

**** range(lower, upper)
Returns an iterable of numbers
from the lower number to the upper number
#+BEGIN_EXAMPLE
prints:
    4
    5
    6
    7
#+END_EXAMPLE
#+BEGIN_SRC python
for i in range(4, 8):
    print(i)
#+END_SRC

**** range(lower, upper, step)
Returns an iterable of numbers
from the lower number to the upper number, while incrementing
by step. If step is not indicated, the default value is 1.
#+BEGIN_EXAMPLE
prints:
    4
    6
#+END_EXAMPLE
#+BEGIN_SRC python
for i in range(4, 8, 2):
    print(i)
#+END_SRC

** While loop
#+BEGIN_EXAMPLE
prints:
    0
    1
    2
    3
#+END_EXAMPLE
#+BEGIN_SRC python
x = 0
while x < 4:
    print(x)
    x += 1  # Shorthand for x = x + 1
#+END_SRC

** try/except - Handle exceptions
#+BEGIN_SRC python
try:
    # Use "raise" to raise an error
    raise IndexError("This is an index error")
except IndexError as e:
    pass                 # Pass is just a no-op. Usually you would do recovery here.
except (TypeError, NameError):
    pass                 # Multiple exceptions can be handled together, if required.
else:                    # Optional clause to the try/except block. Must follow all except blocks
    print("All good!")   # Runs only if the code in try raises no exceptions
finally:                 #  Execute under all circumstances
    print("We can clean up resources here")

# Instead of try/finally to cleanup resources you can use a with statement
with open("myfile.txt") as f:
    for line in f:
        print(line)
#+END_SRC

** Iterables
Python offers a fundamental abstraction called the Iterable.
An iterable is an object that can be treated as a sequence.
The object returned by the range function, is an iterable.

#+BEGIN_SRC python
filled_dict = {"one": 1, "two": 2, "three": 3}
our_iterable = filled_dict.keys()
print(our_iterable)  # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.

# We can loop over it.
for i in our_iterable:
    print(i)  # Prints one, two, three

# However we cannot address elements by index.
our_iterable[1]  # Raises a TypeError

# An iterable is an object that knows how to create an iterator.
our_iterator = iter(our_iterable)

# Our iterator is an object that can remember the state as we traverse through it.
# We get the next object with "next()".
next(our_iterator)  # => "one"

# It maintains state as we iterate.
next(our_iterator)  # => "two"
next(our_iterator)  # => "three"

# After the iterator has returned all of its data, it raises a StopIteration exception
next(our_iterator)  # Raises StopIteration

# You can grab all the elements of an iterator by calling list() on it.
list(filled_dict.keys())  # => Returns ["one", "two", "three"]
#+END_SRC

* Functions
** def - Create new functions
#+BEGIN_SRC python
def add(x, y):
    print("x is {} and y is {}".format(x, y))
    return x + y  # Return values with a return statement
    #+END_SRC

** Calling functions with parameters
#+BEGIN_SRC python
add(5, 6)  # => prints out "x is 5 and y is 6" and returns 11
#+END_SRC

** Another way to call functions
#+BEGIN_SRC python
add(y=6, x=5)  # Keyword arguments can arrive in any order.
#+END_SRC

** Arguments
*** Variable number of positional arguments
You can define functions that take a variable number of
positional arguments
#+BEGIN_SRC python
def varargs(*args):
    return args

varargs(1, 2, 3)  # => (1, 2, 3)
#+END_SRC

*** Variable number of keyword arguments
You can define functions that take a variable number of
keyword arguments, as well
#+BEGIN_SRC python
def keyword_args(**kwargs):
    return kwargs
#+END_SRC

*** Both at once
#+BEGIN_SRC python
keyword_args(big="foot", loch="ness")  # => {"big": "foot", "loch": "ness"}
# You can do both at once, if you like
def all_the_args(*args, **kwargs):
    print(args)
    print(kwargs)
"""
all_the_args(1, 2, a=3, b=4) prints:
    (1, 2)
    {"a": 3, "b": 4}
"""
#+END_SRC

*** Shorthand
When calling functions, you can do the opposite of args/kwargs!
Use * to expand tuples and use ** to expand kwargs.
#+BEGIN_SRC python
args = (1, 2, 3, 4)
kwargs = {"a": 3, "b": 4}
all_the_args(*args)            # equivalent to all_the_args(1, 2, 3, 4)
all_the_args(**kwargs)         # equivalent to all_the_args(a=3, b=4)
all_the_args(*args, **kwargs)  # equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)
#+END_SRC

** Returning multiple values
Returning multiple values (with tuple assignments)
#+BEGIN_SRC python
def swap(x, y):
    return y, x  # Return multiple values as a tuple without the parenthesis.
                 # (Note: parenthesis have been excluded but can be included)
x = 1
y = 2
x, y = swap(x, y)     # => x = 2, y = 1
# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.
#+END_SRC

** Function Scope
#+BEGIN_SRC python
x = 5

def set_x(num):
    # Local var x not the same as global variable x
    x = num    # => 43
    print(x)   # => 43

def set_global_x(num):
    global x
    print(x)   # => 5
    x = num    # global var x is now set to 6
    print(x)   # => 6

set_x(43)
set_global_x(6)
#+END_SRC

** First class functions
Python has first class functions
#+BEGIN_SRC python
def create_adder(x):
    def adder(y):
        return x + y
    return adder

add_10 = create_adder(10)
add_10(3)   # => 13
#+END_SRC

** Anonymous functions
There are also anonymous functions
#+BEGIN_SRC python
(lambda x: x > 2)(3)                  # => True
(lambda x, y: x ** 2 + y ** 2)(2, 1)  # => 5
#+END_SRC

** Built-in higher order funcs
There are built-in higher order functions
#+BEGIN_SRC python
list(map(add_10, [1, 2, 3]))          # => [11, 12, 13]
list(map(max, [1, 2, 3], [4, 2, 1]))  # => [4, 2, 3]

list(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))  # => [6, 7]
#+END_SRC

** List comprehensions
We can use list comprehensions for nice maps and filters
List comprehension stores the output as a list which can itself be a nested list
#+BEGIN_SRC python
[add_10(i) for i in [1, 2, 3]]         # => [11, 12, 13]
[x for x in [3, 4, 5, 6, 7] if x > 5]  # => [6, 7]
#+END_SRC

** Dict comprehensions
You can construct set and dict comprehensions as well.
#+BEGIN_SRC python
{x for x in 'abcddeef' if x not in 'abc'}  # => {'d', 'e', 'f'}
{x: x**2 for x in range(5)}  # => {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
#+END_SRC

* Modules
Python modules are just ordinary Python files. You
can write your own, and import them. The name of the
module is the same as the name of the file.

If you have a Python script named math.py in the same
folder as your current script, the file math.py will
be loaded instead of the built-in Python module.
This happens because the local folder has priority
over Python's built-in libraries.

** import - Import module
You can import modules with the import keyword:
#+BEGIN_SRC python
import math
print(math.sqrt(16))  # => 4.0
#+END_SRC

** Get specific func from module#+BEGIN_SRC python from math import ceil, floor print(ceil(3.7))   # => 4.0 print(floor(3.7))  # => 3.0 #+END_SRC
** Import all funcs from module.
Warning: this is not recommended
#+BEGIN_SRC python
from math import *
#+END_SRC

** Shorten module names
#+BEGIN_SRC python
import math as m
math.sqrt(16) == m.sqrt(16)  # => True
#+END_SRC

** Find which functions and attributes are defined in a module.
#+BEGIN_SRC python
import math
dir(math)
#+END_SRC

* Classes
** Basics
Create a new Human class: (human.py)
#+BEGIN_SRC python
class Human:

    # A class attribute.
    # It is shared by all instances of this class

    species = "H. sapiens"

    # Basic initializer, this is called when this class is instantiated.

    # Note:
    #      the double leading and trailing underscores denote objects
    #      or attributes that are used by Python but that live in
    #      user-controlled namespaces.
    # ###############################################################
    # Methods(or objects or attributes) like: __init__, __str__, __repr__ etc.
    # are called special methods (or sometimes called dunder methods)
    # ###############################################################
    # You should not invent such names on your own.

    def __init__(self, name):
        # Assign the argument to the instance's name attribute
        self.name = name

        # Initialize property
        self._age = 0

    # An instance method.
    # All methods take "self" as the first argument
    def say(self, msg):
        print("{name}: {message}".format(name=self.name, message=msg))

    # Another instance method
    def sing(self):
        return 'yo... yo... microphone check... one two... one two...'

    # A class method is shared among all instances
    # They are called with the calling class as the first argument
    @classmethod
    def get_species(cls):
        return cls.species

    # A static method is called without a class or instance reference
    @staticmethod
    def grunt():
        return "*grunt*"

    # A property is just like a getter.
    # It turns the method age() into an read-only attribute of the same name.
    # There's no need to write trivial getters and setters in Python, though.
    @property
    def age(self):
        return self._age

    # This allows the property to be set
    @age.setter
    def age(self, age):
        self._age = age

    # This allows the property to be deleted
    @age.deleter
    def age(self):
        del self._age


# When a Python interpreter reads a source file it executes all its code.
#
# This __name__ check makes sure this code block is only executed when this
# module is the main program.

if __name__ == '__main__':
    # Instantiate a class
    i = Human(name="Ian")
    i.say("hi")                     # "Ian: hi"
    j = Human("Joel")
    j.say("hello")                  # "Joel: hello"
    # i and j are instances of type Human, or in other words: they are Human objects

    # Call our class method
    i.say(i.get_species())          # "Ian: H. sapiens"
    # Change the shared attribute
    Human.species = "H. neanderthalensis"
    i.say(i.get_species())          # => "Ian: H. neanderthalensis"
    j.say(j.get_species())          # => "Joel: H. neanderthalensis"

    # Call the static method
    print(Human.grunt())            # => "*grunt*"
    
    # Cannot call static method with instance of object
    # because i.grunt() will automatically put "self" (the object i) as an argument
    print(i.grunt())                # => TypeError: grunt() takes 0 positional arguments but 1 was given
                                    
    # Update the property for this instance
    i.age = 42
    # Get the property
    i.say(i.age)                    # => "Ian: 42"
    j.say(j.age)                    # => "Joel: 0"
    # Delete the property
    del i.age
    # i.age                         # => this would raise an AttributeError
#+END_SRC

** Inheritance
Inheritance allows new child classes to be defined that inherit methods and
variables from their parent class.

Using the Human class defined above as the base or parent class, we can
define a child class, Superhero, which inherits the class variables like
"species", "name", and "age", as well as methods, like "sing" and "grunt"
from the Human class, but can also have its own unique properties.

To take advantage of modularization by file you could place the classes above
in their own files, say, human.py

To import functions from other files use the following format
#+BEGIN_SRC python
from "filename-without-extension" import "function-or-class"
#+END_SRC
#+BEGIN_SRC python
from human import Human
#+END_SRC

*** Inherit from the Human class (superhero.py)
#+BEGIN_SRC python
# Specify the parent class(es) as parameters to the class definition
class Superhero(Human):

    # If the child class should inherit all of the parent's definitions without
    # any modifications, you can just use the "pass" keyword (and nothing else)
    # but in this case it is commented out to allow for a unique child class:
    # pass

    # Child classes can override their parents' attributes
    species = 'Superhuman'

    # Children automatically inherit their parent class's constructor including
    # its arguments, but can also define additional arguments or definitions
    # and override its methods such as the class constructor.
    # This constructor inherits the "name" argument from the "Human" class and
    # adds the "superpower" and "movie" arguments:
    def __init__(self, name, movie=False,
                 superpowers=["super strength", "bulletproofing"]):

        # add additional class attributes:
        self.fictional = True
        self.movie = movie
        self.superpowers = superpowers

        # The "super" function lets you access the parent class's methods
        # that are overridden by the child, in this case, the __init__ method.
        # This calls the parent class constructor:
        super().__init__(name)

    # override the sing method
    def sing(self):
        return 'Dun, dun, DUN!'

    # add an additional instance method
    def boast(self):
        for power in self.superpowers:
            print("I wield the power of {pow}!".format(pow=power))


if __name__ == '__main__':
    sup = Superhero(name="Tick")

    # Instance type checks
    if isinstance(sup, Human):
        print('I am human')
    if type(sup) is Superhero:
        print('I am a superhero')

    # Get the Method Resolution search Order used by both getattr() and super()
    # This attribute is dynamic and can be updated
    print(Superhero.__mro__)    # => (<class '__main__.Superhero'>,
                                # => <class 'human.Human'>, <class 'object'>)

    # Calls parent method but uses its own class attribute
    print(sup.get_species())    # => Superhuman

    # Calls overridden method
    print(sup.sing())           # => Dun, dun, DUN!

    # Calls method from Human
    sup.say('Spoon')            # => Tick: Spoon

    # Call method that exists only in Superhero
    sup.boast()                 # => I wield the power of super strength!
                                # => I wield the power of bulletproofing!

    # Inherited class attribute
    sup.age = 31
    print(sup.age)              # => 31

    # Attribute that only exists within Superhero
    print('Am I Oscar eligible? ' + str(sup.movie))
#+END_SRC

** Multiple Inheritance
Another class example for Batman to inherit bellow (bat.py)
#+BEGIN_SRC python
class Bat:

    species = 'Baty'

    def __init__(self, can_fly=True):
        self.fly = can_fly

    # This class also has a say method
    def say(self, msg):
        msg = '... ... ...'
        return msg

    # And its own method as well
    def sonar(self):
        return '))) ... ((('

if __name__ == '__main__':
    b = Bat()
    print(b.say('hello'))
    print(b.fly)
#+END_SRC

*** Multiple Inheritance Example
The class Batman inherits from the class Human and Bat to create a Batman class.
#+BEGIN_SRC python
# And yet another class definition that inherits from Superhero and Bat
# superhero.py
from superhero import Superhero
from bat import Bat

# Define Batman as a child that inherits from both Superhero and Bat
class Batman(Superhero, Bat):

    def __init__(self, *args, **kwargs):
        # Typically to inherit attributes you have to call super:
        # super(Batman, self).__init__(*args, **kwargs)
        # However we are dealing with multiple inheritance here, and super()
        # only works with the next base class in the MRO list.
        # So instead we explicitly call __init__ for all ancestors.
        # The use of *args and **kwargs allows for a clean way to pass arguments,
        # with each parent "peeling a layer of the onion".
        Superhero.__init__(self, 'anonymous', movie=True,
                           superpowers=['Wealthy'], *args, **kwargs)
        Bat.__init__(self, *args, can_fly=False, **kwargs)
        # override the value for the name attribute
        self.name = 'Sad Affleck'

    def sing(self):
        return 'nan nan nan nan nan batman!'


if __name__ == '__main__':
    sup = Batman()

    # Get the Method Resolution search Order used by both getattr() and super().
    # This attribute is dynamic and can be updated
    print(Batman.__mro__)       # => (<class '__main__.Batman'>,
                                # => <class 'superhero.Superhero'>,
                                # => <class 'human.Human'>,
                                # => <class 'bat.Bat'>, <class 'object'>)

    # Calls parent method but uses its own class attribute
    print(sup.get_species())    # => Superhuman

    # Calls overridden method
    print(sup.sing())           # => nan nan nan nan nan batman!

    # Calls method from Human, because inheritance order matters
    sup.say('I agree')          # => Sad Affleck: I agree

    # Call method that exists only in 2nd ancestor
    print(sup.sonar())          # => ))) ... (((

    # Inherited class attribute
    sup.age = 100
    print(sup.age)              # => 100

    # Inherited attribute from 2nd ancestor whose default value was overridden.
    print('Can I fly? ' + str(sup.fly)) # => Can I fly? False
#+END_SRC

* Advanced
** Generators
Generators help you make lazy code.
#+BEGIN_SRC python
def double_numbers(iterable):
    for i in iterable:
        yield i + i
#+END_SRC

Generators are memory-efficient because they only load the data needed to
process the next value in the iterable.

This allows them to perform operations on otherwise prohibitively large value ranges.
_*NOTE: `range` replaces `xrange` in Python 3*_.
#+BEGIN_SRC python
for i in double_numbers(range(1, 900000000)):  # `range` is a generator.
    print(i)
    if i >= 30:
        break
#+END_SRC

Just as you can create a list comprehension, you can create generator
comprehensions as well.
#+BEGIN_SRC python
values = (-x for x in [1,2,3,4,5])
for x in values:
    print(x)  # prints -1 -2 -3 -4 -5 to console/terminal
#+END_SRC

You can also cast a generator comprehension directly to a list.
#+BEGIN_SRC python
values = (-x for x in [1,2,3,4,5])
gen_to_list = list(values)
print(gen_to_list)  # => [-1, -2, -3, -4, -5]
#+END_SRC

** Decorators
In this example `beg` wraps `say`. If =say_please= is True then it
will change the returned message.

#+BEGIN_SRC python
from functools import wraps

def beg(target_function):
    @wraps(target_function)
    def wrapper(*args, **kwargs):
        msg, say_please = target_function(*args, **kwargs)
        if say_please:
            return "{} {}".format(msg, "Please! I am poor :(")
        return msg

    return wrapper

@beg
def say(say_please=False):
    msg = "Can you buy me a beer?"
    return msg, say_please


print(say())                 # Can you buy me a beer?
print(say(say_please=True))  # Can you buy me a beer? Please! I am poor :(
#+END_SRC
